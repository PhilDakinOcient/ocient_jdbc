jason
pwd
connect to jdbc:ocient://localhost:4050/Test;
timing on;
/* THIS SCRIPT REQUIRES VERIFICATION OF VALUES */

select 1, 1, 1 from sys.dummy1 /* definite */;
select c1, c1, c1 from sys.dummy1 /* definite */;
select byte(c1), byte(c1), byte(c1) from sys.dummy1 /* definite */;
select 1 as first, 1 as second from sys.dummy1 /* definite */;
select 1 as first, 1 as first from sys.dummy1 /* ambigcol */;
select c1 as first, c1 as second from sys.dummy1 /* definite */;
select c1 as first, c1 as first from sys.dummy1 /* ambigcol */;
select byte(c1) as first, byte(c1) as second from sys.dummy1 /* definite */;
select byte(c1) as first, byte(c1) as first from sys.dummy1 /* ambigcol */;
select c1, 1 as c1 from sys.dummy1 /* definite */;
select 1 as c1, c1 from sys.dummy1 /* definite */;
connect to jdbc:ocient://192.168.111.80:4050/Test;
connect to jdbc:ocient://192.168.111.80:4050/Test force;
connect to jdbc:ocient://192.168.111.80:4050/Test user u using p;
connect to jdbc:ocient://192.168.111.80:4050/Test user u using p force;
CONNECT TO jdbc:ocient://192.168.111.80:4050/Test user u using p force;
connect to jdbc:ocient://192.168.111.80:4050/Test user USer using passWORD FoRcE;
connect to jdbc:ocient://192.168.111.80:4050/Test user "USer" using passWORD FoRcE;
connect to jdbc:ocient://192.168.111.80:4050/Test user u using a long password with spaces in it;
connect to jdbc:ocient://192.168.111.80:4050/Test user u using a long password with spaces in it force;
connect to jdbc:ocient://192.168.111.80:4050/Test user "a long username with whitespace" using a long password with whitespace;
connect to jdbc:ocient://192.168.111.80:4050/Test user "a long username with whitespace" using a long password with whitespace force;
connect to jdbc:ocient://192.168.111.80:4050/Test user u using "a long password with spaces and quotes";
connect to jdbc:ocient://192.168.111.80:4050/Test user u using "a long password with spaces and quotes" force;
/* THIS SCRIPT REQUIRES VERIFICATION OF VALUES */
;
list tables /* definite */ ;
list /* a comment */ tables /* definite */ ;
list tab/* a comment in the middle of a word */les /* definite */ ;
/* a comment at the beginning */ list tables /* definite */ ;
list tables /* a comment near the end */ ;
list tables; /* a comment at the end */
list /* a multiline
comment */ tables;
list /* a multiline comment;
the previous line ends in a semicolon */ tables;
list /* a
three-line
comment */ tables;
list /* multiple */ tab/* comments */les /* definite */ ;
list /* multiple */ tab/* comments;
some of them have semicola */les;
list /* /* /* an odd-looking comment which is in fact fine */ tables /* definite */;
list /* an odd comment which is indeed a syntax error */ */ */ tables /* stxerror */;
list -- a single-line comment
tables;
list -- a single-line comment, ending in a semicolon;
tables;
list /* a comment--with a dash */ tables;
list -- a single-line comment with */ a star and a slash
tables;
describe system.ingresstest /* definite */ ;
describe SyStEm.INGRESSTEST /* definite */ ;
describe SyStEm."ingresstest" /* definite */ ;
describe SyStEm."INGRESSTEST" /* notfound */ ;
select 'a LITERAL string' from system.ingresstest /* definite */ ;
select 'a LITERAL string with "double quotes" in it' from system.ingresstest /* definite */ ;
select 'a LITERAL string with " one literal double quote' from system.ingresstest /* definite */ ;
select 'a LITERAL string with '' one literal single quote' from system.ingresstest /* definite */ ;
select 'a LITERAL string /* with a comment in it */' from system.ingresstest /* definite */ ;
select 'a LITERAL string --with a single-line comment in it */' from system.ingresstest /* definite */ ;
select 'a LITERAL string; it has a semicolon' from system.ingresstest /* definite */ ;
select 'a LITERAL string;
it has a semicolon' from system.ingresstest;
list tables /* definite */ ;
list tables verbose /* definite */ ;
describe ingresstest /* definite */ ;
describe INGRESSTEST /* definite */ ;
describe "ingresstest" /* definite */ ;
describe system.ingresstest /* definite */ ;
describe system."ingresstest" /* definite */ ;
describe "system".ingresstest /* definite */ ;
describe "system"."ingresstest" /* definite */ ;
describe table ingresstest /* definite */ ;
describe table system.ingresstest /* definite */ ;
describe ingresstest verbose /* definite */ ;
describe "ingresstest" verbose /* definite */ ;
describe "INGRESSTEST" /* notfound */ ;
describe nonexistent.table /* notfound */ ;
list indices ingresstest /* definite */ ;
list indices "ingresstest" /* definite */ ;
list indices system.ingresstest /* definite */ ;
list indices ingresstest verbose /* definite */ ;
list indices "ingresstest" verbose /* definite */ ;
create mlmodel model1 type simple linear regression on (select clusterleft, val0 from system.ingresstest) /* definite */ ;
create mlmodel model1 type simple linear regression on (select clusterleft, val0 from system.ingresstest) /* alrdyext */ ;
drop mlmodel model1 /* definite */ ;
drop mlmodel model1 /* notfound */ ;
create mlmodel model1 type simple linear regression on (select clusterleft, val0 from system.ingresstest)  options('metrics' -> 'true') /* definite */ ;
drop mlmodel model1 /* definite */ ;
create mlmodel model1 type simple linear regression on (select clusterleft, val0 from system.ingresstest) options('metrics' -> 'true', 'yIntercept' -> '0') /* definite */ ;
drop mlmodel model1 /* definite */ ;
create mlmodel model1 type simple linear regression on (select clusterleft, val0 from system.ingresstest) options('yIntercept' -> '0') /* definite */ ;
select model1(clusterleft) from system.ingresstest /* definite */ ;
select model1(clusterleft) - val0 as error from system.ingresstest /* definite */ ;
select abs(model1(clusterleft) - val0) as l1_error from system.ingresstest /* definite */ ;
select model1(9) from system.ingresstest /* definite */ ;
select model1(int(9)) from system.ingresstest /* definite */ ;
select model1(clusterleft + val0) from system.ingresstest /* definite */ ;
select model1(abs(clusterleft)) from system.ingresstest /* definite */ ;
create mlmodel my_model type multiple linear regression on (select clusterleft, clusterright, clusterextra, val0, val1 from system.ingresstest) /* definite */ ;
drop mlmodel my_model /* definite */ ;
create mlmodel my_model type multiple linear regression on (select clusterleft, clusterright, clusterextra, val0, val1 from system.ingresstest) options('metrics' -> 'true') /* definite */ ;
drop mlmodel my_model /* definite */ ;
create mlmodel my_model type multiple linear regression on (select clusterleft, clusterright, clusterextra, val0, val1 from system.ingresstest) options('metrics' -> 'true', 'gamma' -> '{{1,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0},{0,0,1,0,0,0,0,0},{0,0,0,1,0,0,0,0},{0,0,0,0,1,0,0,0},{0,0,0,0,0,1,0,0},{0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,1}}') /* definite */ ;
drop mlmodel my_model /* definite */ ;
create mlmodel my_model type multiple linear regression on (select clusterleft, clusterright, clusterextra, val0, val1 from system.ingresstest) options('gamma' -> '{{1,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0},{0,0,1,0,0,0,0,0},{0,0,0,1,0,0,0,0},{0,0,0,0,1,0,0,0},{0,0,0,0,0,1,0,0},{0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,1}}') /* definite */ ;
select my_model(clusterleft, clusterright, clusterextra, val0, val1) from system.ingresstest /* definite */ ;
select my_model(clusterleft, clusterright, clusterextra, val0, val1) - val2 as error from system.ingresstest /* definite */ ;
select abs(my_model(clusterleft, clusterright, clusterextra, val0, val1) - val2) as l1_error from system.ingresstest /* definite */ ;
select abs(my_model(clusterleft, clusterright, clusterextra, val0, val1) - val2) + abs(model1(clusterleft) - val0) as combined_error from system.ingresstest /* definite */ ;
select my_model(0, 0, 0, 0, 0, 0, 0) from system.ingresstest /* definite */ ;
select my_model(0, clusterright, 0, val0, 0, 0, 0) from system.ingresstest /* definite */ ;
select my_model(0, abs(clusterright), abs(0), val0, 0, 0, 0) from system.ingresstest /* definite */ ;
drop mlmodel my_model /* definite */ ;
drop mlmodel model1 /* definite */ ;
select * from system.ingresstest /* definite */ ;
select id from system.ingresstest /* definite */ ;
select id from system.ingresstest where id = 0 /* definite */ ;
select id from system.ingresstest where id = 1 /* definite */ ;
select time from system.ingresstest where id = 0 /* definite */ ;
select id from system.ingresstest where id <= 0 /* definite */ ;
select id from system.ingresstest where id >= 0 /* definite */ ;
select id from system.ingresstest where id > 0 /* definite */ ;
select id from system.ingresstest where id < 0 /* definite */ ;
select id from system.ingresstest where id <> 0 /* definite */ ;
select id from system.ingresstest where not id = 0 /* definite */ ;
select id, time from system.ingresstest /* definite */ ;
select id from system.ingresstest where id > 1 and id < 4 /* definite */ ;
select id from system.ingresstest where id = 2 or id = 5 /* definite */ ;
select id from system.ingresstest where id < 2 or id > 5 /* definite */ ;
select id from system.ingresstest where id between 1 and 4 /* definite */ ;
select id from system.ingresstest where id in (3, 6) /* definite */ ;
select id + 1 from system.ingresstest /* definite */ ;
select clusterleft + clusterright from system.ingresstest /* definite */ ;
select id + 1 as newid from system.ingresstest /* definite */ ;
select 2*id as doubleid from system.ingresstest /* definite */ ;
select power(2, id) from system.ingresstest /* definite */ ;
select count(*) from system.ingresstest /* definite */ ;
select count(id) from system.ingresstest /* definite */ ;
select val0, count(*) from system.ingresstest group by val0 /* definite */ ;
select max(val0) from system.ingresstest /* definite */ ;
select val0, max(id) from system.ingresstest group by val0 /* definite */ ;
select min(val0) from system.ingresstest /* definite */ ;
select val0, min(id) from system.ingresstest group by val0 /* definite */ ;
select val0, val1, count(*) as cnt from system.ingresstest group by val0, val1 /* definite */ ;
select max(val0), sum(val0) from system.ingresstest /* definite */ ;
select val1, val2, count(*) as cnt from system.ingresstest group by val1, val2 /* definite */ ;
select val0, val1, max(val2) as m, sum(val2) as s from system.ingresstest group by val0, val1 /* definite */ ;
select val0, val1, max(val2) as m, sum(val2) as s from system.ingresstest group by val0, val1 order by s /* definite */ ;
select val0, val1, max(val2) as m, sum(val2) as s from system.ingresstest group by val0, val1 order by s asc /* definite */ ;
select val0, val1, max(val2) as m, sum(val2) as s from system.ingresstest group by val0, val1 order by val0, val1 /* definite */ ;
select val0, val1, max(val2) as m, sum(val2) as s from system.ingresstest group by val0, val1 order by val0 desc, val1 /* definite */ ;
select val0, val1, max(val2) as m, sum(val2) as s from system.ingresstest group by val0, val1 order by val0, val1 desc /* definite */ ;
select val0, val1, max(val2) as m, sum(val2) as s from system.ingresstest group by val0, val1 order by val0 asc, val1 desc /* definite */ ;
select val0, val1, max(val2) as m, sum(val2) as s from system.ingresstest group by val0, val1 order by val0 asc, val1 desc limit 10 /* definite */ ;
select val0, val1, max(val2) as m, sum(val2) as s from system.ingresstest group by val0, val1 order by val0 asc, val1 desc offset 10 /* definite */ ;
select val0, val1, max(val2) as m, sum(val2) as s from system.ingresstest group by val0, val1 order by val0 asc, val1 desc limit 10 offset 10 /* definite */ ;
select * from system.ingresstest order by clusterextra, clusterright /* definite */ ;
select * from system.ingresstest order by clusterextra, clusterright limit 10 /* definite */ ;
select * from system.ingresstest limit 10 /* definite */ ;
select * from system.ingresstest order by clusterextra, clusterright offset 10 /* definite */ ;
select * from system.ingresstest offset 10 /* definite */ ;
select * from system.ingresstest order by clusterextra, clusterright limit 10 offset 10 /* definite */ ;
select * from system.ingresstest limit 10 offset 10 /* definite */ ;
select sum(val0)+1 from system.ingresstest /* definite */ ;
select (min(val0) + max(val0)) / 2 from system.ingresstest /* definite */ ;
select val0, count(val1)+1 from system.ingresstest group by val0 having count(val1) > 2 /* definite */ ;
select val0, count(val1)+1 from system.ingresstest group by val0 having count(val1) > 2 order by val0 limit 5 /* definite */ ;
select val0 from system.ingresstest group by val0 having count(val1) > 2 /* definite */ ;
select val0 from system.ingresstest group by val0 having count(val1)+1 > 2 /* definite */ ;
select * from system.ingresstest where val3 = 'R' /* definite */ ;
select val0 from system.ingresstest where val3 = 'R' /* definite */ ;
select avg(val0) from system.ingresstest /* definite */ ;
select stdev(val0) from system.ingresstest /* definite */ ;
select variance(val0) from system.ingresstest /* definite */ ;
select variance(val0), stdev(val0) from system.ingresstest /* definite */ ;
select * from system.ingresstest where val3 is null /* definite */ ;
select * from system.ingresstest where val3 is not null /* definite */ ;
select * from system.ingresstest where not val3 is null /* definite */ ;
select 1 from system.ingresstest /* definite */ ;
select 'a' from system.ingresstest /* definite */ ;
select * from system.ingresstest where val4 > date('1994-01-01') /* definite */ ;
select * from system.ingresstest where val0 = val2 /* definite */ ;
explain ((select c1 from sys.dummy1000000000) union (select c1 from sys.dummy1000000000)) union all (select case when c1 > 10 then c1 else 0 end as switchCol from sys.dummy1000000000);
explain ((select c1 from sys.dummy1000000000) intersect (select c1 from sys.dummy1000000000)) intersect all (select case when c1 > 10 then c1 else 0 end as switchCol from sys.dummy1000000000);
explain ((select c1 from sys.dummy1000000000) except (select c1 from sys.dummy1000000000)) except all (select case when c1 > 10 then c1 else 0 end as switchCol from sys.dummy1000000000);
explain ((select c1 from sys.dummy1000000000) except (select c1 from sys.dummy1000000000)) except all ((select c1 from sys.dummy1000000000) union (select c1 from sys.dummy1000000000));
explain select count(distinct c1) from ((select c1 from sys.dummy1000000000) union all (select c1 from sys.dummy1000000000));
explain select t3.c1 from (((select c1 from sys.dummy1000000000 where c1 > 5) union (select c1 from sys.dummy1000000000 where c1 > 10)) t1 inner join (select sum(c1) as c2 from sys.dummy1000000000) t2 on t1.c1 = t2.c2) t3 where t3.c1 > 20;
explain select sum(t3.c1) from ((select c1, c1 as c2 from sys.dummy1000000000) t1 inner join (select c1 as c3, c1 as c4 from sys.dummy1000000000) t2 on t1.c1 = t2.c3 and t1.c2 = t2.c4) t3 group by t3.c1, t3.c2;
explain select sum(c1) over(partition by c1 order by c1) as col1, avg(c1) over(partition by c1 order by c1) as col2 from sys.dummy1000000000;
explain select * from (((select c1 from sys.dummy1000000000) t1 inner join (select c1 as c2 from sys.dummy1000000000) t2 on t1.c1 = t2.c2) t3 inner join (select c1 as c4 from sys.dummy1000000000) t4 on t3.c1 = t4.c4) t5;
explain select modCol, count(c2) from (select c1 from sys.dummy100000000) t1 inner join (select c1 as c2, mod(c1, 100000000) as modCol from sys.dummy1000000000) t2 on t1.c1 = t2.modCol group by modCol;
quit
