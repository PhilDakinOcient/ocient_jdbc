create mlmodel model1 type simple linear regression on (select clusterleft, val0 from system.ingresstest) /* definite */ ;
create mlmodel model1 type simple linear regression on (select clusterleft, val0 from system.ingresstest) /* alrdyext */ ;
drop mlmodel model1 /* definite */ ;
drop mlmodel model1 /* notfound */ ;
create mlmodel model1 type simple linear regression on (select clusterleft, val0 from system.ingresstest)  options('metrics' -> 'true') /* definite */ ;
drop mlmodel model1 /* definite */ ;
create mlmodel model1 type simple linear regression on (select clusterleft, val0 from system.ingresstest) options('metrics' -> 'true', 'yIntercept' -> '0') /* definite */ ;
drop mlmodel model1 /* definite */ ;
create mlmodel model1 type simple linear regression on (select clusterleft, val0 from system.ingresstest) options('yIntercept' -> '0') /* definite */ ;
select model1(clusterleft) from system.ingresstest /* definite */ ;
select model1(clusterleft) - val0 as error from system.ingresstest /* definite */ ;
select abs(model1(clusterleft) - val0) as l1_error from system.ingresstest /* definite */ ;
select model1(9) from system.ingresstest /* definite */ ;
select model1(int(9)) from system.ingresstest /* definite */ ;
select model1(clusterleft + val0) from system.ingresstest /* definite */ ;
select model1(abs(clusterleft)) from system.ingresstest /* definite */ ;
create mlmodel my_model type multiple linear regression on (select clusterleft, clusterright, clusterextra, val0, val1 from system.ingresstest) /* definite */ ;
drop mlmodel my_model /* definite */ ;
create mlmodel my_model type multiple linear regression on (select clusterleft, clusterright, clusterextra, val0, val1 from system.ingresstest) options('metrics' -> 'true') /* definite */ ;
drop mlmodel my_model /* definite */ ;
create mlmodel my_model type multiple linear regression on (select clusterleft, clusterright, clusterextra, val0, val1 from system.ingresstest) options('metrics' -> 'true', 'gamma' -> '{{1,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0},{0,0,1,0,0,0,0,0},{0,0,0,1,0,0,0,0},{0,0,0,0,1,0,0,0},{0,0,0,0,0,1,0,0},{0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,1}}') /* definite */ ;
drop mlmodel my_model /* definite */ ;
create mlmodel my_model type multiple linear regression on (select clusterleft, clusterright, clusterextra, val0, val1 from system.ingresstest) options('gamma' -> '{{1,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0},{0,0,1,0,0,0,0,0},{0,0,0,1,0,0,0,0},{0,0,0,0,1,0,0,0},{0,0,0,0,0,1,0,0},{0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,1}}') /* definite */ ;
select my_model(clusterleft, clusterright, clusterextra, val0, val1) from system.ingresstest /* definite */ ;
select my_model(clusterleft, clusterright, clusterextra, val0, val1) - val2 as error from system.ingresstest /* definite */ ;
select abs(my_model(clusterleft, clusterright, clusterextra, val0, val1) - val2) as l1_error from system.ingresstest /* definite */ ;
select abs(my_model(clusterleft, clusterright, clusterextra, val0, val1) - val2) + abs(model1(clusterleft) - val0) as combined_error from system.ingresstest /* definite */ ;
select my_model(0, 0, 0, 0, 0, 0, 0) from system.ingresstest /* definite */ ;
select my_model(0, clusterright, 0, val0, 0, 0, 0) from system.ingresstest /* definite */ ;
select my_model(0, abs(clusterright), abs(0), val0, 0, 0, 0) from system.ingresstest /* definite */ ;
drop mlmodel my_model /* definite */ ;
drop mlmodel model1 /* definite */ ;
